// const { expect } = require("chai");
// const { ethers } = require("hardhat");

// describe("Testing Crowdfund contract ++++++", async () => {
//     let Token, _Token, USDT, _USDT, Cfund, _Cfund;
//     let owner, addr1, addr2;

//     beforeEach("Setup", async () => {
//         [owner, addr1, addr2] = await ethers.getSigners();
//         _Token = await ethers.getContractFactory("MyToken");
//         Token = await _Token.connect(addr1).deploy();
//         // console.log("Token deployed_____", Token.address);
//         _USDT=await ethers.getContractFactory("USDT");
//         USDT=await _USDT.connect(addr2).deploy();
//         // console.log("USDT deployed_____", USDT.address);


//         _Cfund=await ethers.getContractFactory("CrowdFund");
//         Cfund=await _Cfund.connect(owner).deploy(Token.address,USDT.address);

//         // console.log("Cfund deployed_____", Cfund.address);

//         await Token.connect(addr1).approve(Cfund.address,1000);
//         await USDT.connect(addr2).approve(Cfund.address,1000);




//     });

//     describe("Testing Deployment", () => {
//         it("should deploy All contracts", async () => {
//             // Here you can add assertions to check the deployment.
//             expect(Token.address).to.not.be.undefined;
//             expect(USDT.address).to.not.be.undefined;
//             expect(Cfund.address).to.not.be.undefined;


//         });

//         it("CHECKing Allowance for both for contract",async()=>{
//             expect(await Token.connect(addr1).allowance(addr1.address,Cfund.address)).to.equal(1000);
//             expect(await USDT.connect(addr2).allowance(addr2.address,Cfund.address)).to.equal(1000);

//         })

//         it("Checking staking tokens function",async()=>{
//             await expect( Cfund.connect(addr1).stakeToken(1001)).to.be.revertedWith("User has less token");
//             await Cfund.connect(addr1).stakeToken(500);
//             // expect(await Cfund.connect(addr1).stakeToken(1001)).to.be.revertedWith("User has less token");
//             // console.log("await Cfund.userStakedAmount[addr1.addres]", Cfund.userStakedAmount()) 
//             expect(await Cfund.userStakedAmount(addr1.address)).to.equal(500);
//             expect(await Cfund.userCrowdFundLimit(addr1.address)).to.equal(10 * 500);

//             await Cfund.connect(addr1).stakeToken(300);

//             expect(await Cfund.userStakedAmount(addr1.address)).to.equal(800);
//             expect(await Cfund.userCrowdFundLimit(addr1.address)).to.equal(10 * 800);
//         })
//         it("Checking Start Crowdfund method+++++",async()=>{
//             await expect( Cfund.connect(addr1).startCrowdFund(3,200)).to.be.revertedWith("You haven't Staked any TokensA");
            
//             await Cfund.connect(addr1).stakeToken(500);
//             await expect(Cfund.connect(addr1).startCrowdFund(200,5200)).to.be.revertedWith("Limit Exceeded");
//             await Cfund.connect(addr1).startCrowdFund(10,2000);
//             expect(await Cfund.userStakedAmount(addr1.address)).to.equal(500);
//             expect(await Cfund.userCrowdFundLimit(addr1.address)).to.equal(10 * 300);

//             await Cfund.connect(addr1).startCrowdFund(5,1000);

//             expect(await Cfund.userStakedAmount(addr1.address)).to.equal(500);
//             expect(await Cfund.userCrowdFundLimit(addr1.address)).to.equal(10 * 200);
//         })

//         describe("Checking Participate Function +++++++",async()=>{
//             let user1,user2,user3,user4,user5,user6;
//             beforeEach(async () => {
//               await expect(
//                 Cfund.connect(addr1).stakeToken(1001)
//               ).to.be.revertedWith("User has less token");
//               await Cfund.connect(addr1).stakeToken(500);
//               // expect(await Cfund.connect(addr1).stakeToken(1001)).to.be.revertedWith("User has less token");
//               // console.log("await Cfund.userStakedAmount[addr1.addres]", Cfund.userStakedAmount())
//               expect(await Cfund.userStakedAmount(addr1.address)).to.equal(500);
//               expect(await Cfund.userCrowdFundLimit(addr1.address)).to.equal(
//                 10 * 500
//               );

//               await Cfund.connect(addr1).startCrowdFund(5, 500);

//               expect(await Cfund.userStakedAmount(addr1.address)).to.equal(500);
//               expect(await Cfund.userCrowdFundLimit(addr1.address)).to.equal(
//                 10 * 450
//               );

//               [user1, user2, user3, user4, user5,user6] = await ethers.getSigners();
             
//                 await USDT.transfer(user1.address, 200);
//                 await USDT.transfer(user2.address, 200);
//                 await USDT.transfer(user3.address, 200);
//                 await USDT.transfer(user4.address, 200);
//                 await USDT.transfer(user5.address, 200);
//                 await USDT.transfer(user6.address, 200);


//                 await USDT.connect(user1).approve(Cfund.address, 200);
//                 await USDT.connect(user2).approve(Cfund.address, 200);

//                 await USDT.connect(user3).approve(Cfund.address, 200);

//                 await USDT.connect(user4).approve(Cfund.address, 200);

//                 await USDT.connect(user5).approve(Cfund.address, 200);
//                 await USDT.connect(user6).approve(Cfund.address, 200);

//             });
//             it("Checking Participate Function +++++++",async()=>{
//                   expect(await USDT.balanceOf(user1.address)).to.equal(200);
//                   expect(await USDT.connect(user1).allowance(user1.address,Cfund.address)).to.equal(200);

//                   await expect(Cfund.connect(user1).participate(3)).to.be.revertedWith('either Fund Dont exist or crowdFund Complete ');
//                 //   await Cfund.connect(user1.address).participate(0);
//                 await Cfund.connect(user1).participate(0);
//                 await Cfund.connect(user2).participate(0);
//                 await Cfund.connect(user3).participate(0);
//                 await Cfund.connect(user4).participate(0);
//                 await Cfund.connect(user5).participate(0);

//                 await expect( Cfund.connect(user6).participate(0)).to.be.revertedWith("Crowdfund completed");
//             })

//             it("Checking Withdraw Function of Staker========",async()=>{
//                 await Cfund.connect(user1).participate(0);
//                 await Cfund.connect(user2).participate(0);
//                 await Cfund.connect(user3).participate(0);
//                 await Cfund.connect(user4).participate(0);

//                 await expect(  Cfund.connect(addr1).stakerReward(2)).to.be.revertedWith("This Fund Belongs to Other Owner");
//                 await expect(  Cfund.connect(addr1).stakerReward(0)).to.be.revertedWith("Wait for crowdfunding To end");
//                 await Cfund.connect(user5).participate(0);
//                 await Cfund.connect(addr1).stakerReward(0);

//                 expect(await USDT.balanceOf(addr1.address)).to.equal(600);
//                 // console.log("Checking cFund____=+++",await Cfund.crowdFundingDetails(0));
//                 await expect(  Cfund.connect(addr1).stakerReward(0)).to.be.revertedWith("Rewards already redeemed");



//             })

//             it("Checking Redeem Reward",async()=>{
//                 await Cfund.connect(user1).participate(0);
//                 await Cfund.connect(user2).participate(0);
//                 await Cfund.connect(user3).participate(0);
//                 await Cfund.connect(user4).participate(0);

//                 await expect(  Cfund.connect(addr1).stakerReward(2)).to.be.revertedWith("This Fund Belongs to Other Owner");
//                 await expect(  Cfund.connect(addr1).stakerReward(0)).to.be.revertedWith("Wait for crowdfunding To end");
//                 await Cfund.connect(user5).participate(0);
//                 await Cfund.connect(user1).redeemReward(false,0,0);
//                 expect(await Token.balanceOf(user1.address)).to.equal(100)
//                 await Cfund.connect(user2).redeemReward(true,0,2);

//             })
            


//         })
//     });
// });




// ************************************************************